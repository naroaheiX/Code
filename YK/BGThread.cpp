// BGThread.cpp : implementation file
//

#include "stdafx.h"
#include "YK.h"
#include "BGThread.h"
#include "PCOMM.H"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/////////////////////////////////////////////////////////////////////////////
// CBGThread
unsigned char aucCRCHi[]=
{
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
	0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
	0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0xC1, 0x81, 0x40,
	0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0, 0x80, 0x41, 0x00, 0xC1,
	0x81, 0x40, 0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41,
	0x00, 0xC1, 0x81, 0x40, 0x01, 0xC0, 0x80, 0x41, 0x01, 0xC0,
	0x80, 0x41, 0x00, 0xC1, 0x81, 0x40, 0x00, 0x00, 0x00, 0x00
};

unsigned char aucCRCLo[]=
{
	0x00, 0xC0, 0xC1, 0x01, 0xC3, 0x03, 0x02, 0xC2, 0xC6, 0x06,
	0x07, 0xC7, 0x05, 0xC5, 0xC4, 0x04, 0xCC, 0x0C, 0x0D, 0xCD,
	0x0F, 0xCF, 0xCE, 0x0E, 0x0A, 0xCA, 0xCB, 0x0B, 0xC9, 0x09,
	0x08, 0xC8, 0xD8, 0x18, 0x19, 0xD9, 0x1B, 0xDB, 0xDA, 0x1A,
	0x1E, 0xDE, 0xDF, 0x1F, 0xDD, 0x1D, 0x1C, 0xDC, 0x14, 0xD4,
	0xD5, 0x15, 0xD7, 0x17, 0x16, 0xD6, 0xD2, 0x12, 0x13, 0xD3,
	0x11, 0xD1, 0xD0, 0x10, 0xF0, 0x30, 0x31, 0xF1, 0x33, 0xF3,
	0xF2, 0x32, 0x36, 0xF6, 0xF7, 0x37, 0xF5, 0x35, 0x34, 0xF4,
	0x3C, 0xFC, 0xFD, 0x3D, 0xFF, 0x3F, 0x3E, 0xFE, 0xFA, 0x3A,
	0x3B, 0xFB, 0x39, 0xF9, 0xF8, 0x38, 0x28, 0xE8, 0xE9, 0x29,
	0xEB, 0x2B, 0x2A, 0xEA, 0xEE, 0x2E, 0x2F, 0xEF, 0x2D, 0xED,
	0xEC, 0x2C, 0xE4, 0x24, 0x25, 0xE5, 0x27, 0xE7, 0xE6, 0x26,
	0x22, 0xE2, 0xE3, 0x23, 0xE1, 0x21, 0x20, 0xE0, 0xA0, 0x60,
	0x61, 0xA1, 0x63, 0xA3, 0xA2, 0x62, 0x66, 0xA6, 0xA7, 0x67,
	0xA5, 0x65, 0x64, 0xA4, 0x6C, 0xAC, 0xAD, 0x6D, 0xAF, 0x6F,
	0x6E, 0xAE, 0xAA, 0x6A, 0x6B, 0xAB, 0x69, 0xA9, 0xA8, 0x68,
	0x78, 0xB8, 0xB9, 0x79, 0xBB, 0x7B, 0x7A, 0xBA, 0xBE, 0x7E,
	0x7F, 0xBF, 0x7D, 0xBD, 0xBC, 0x7C, 0xB4, 0x74, 0x75, 0xB5,
	0x77, 0xB7, 0xB6, 0x76, 0x72, 0xB2, 0xB3, 0x73, 0xB1, 0x71,
	0x70, 0xB0, 0x50, 0x90, 0x91, 0x51, 0x93, 0x53, 0x52, 0x92,
	0x96, 0x56, 0x57, 0x97, 0x55, 0x95, 0x94, 0x54, 0x9C, 0x5C,
	0x5D, 0x9D, 0x5F, 0x9F, 0x9E, 0x5E, 0x5A, 0x9A, 0x9B, 0x5B,
	0x99, 0x59, 0x58, 0x98, 0x88, 0x48, 0x49, 0x89, 0x4B, 0x8B,
	0x8A, 0x4A, 0x4E, 0x8E, 0x8F, 0x4F, 0x8D, 0x4D, 0x4C, 0x8C,
	0x44, 0x84, 0x85, 0x45, 0x87, 0x47, 0x46, 0x86, 0x82, 0x42,
	0x43, 0x83, 0x41, 0x81, 0x80, 0x40, 0x00, 0x00, 0x00, 0x00
};

void CBGThread::CRC16(unsigned char* pushMsg, int DataLength, unsigned char* crc)
{
	unsigned char ucCRCHi=0xFF;
	unsigned char ucCRCLo=0xFF;

	unsigned char ucIndex;
	while(DataLength--)
	{
		ucIndex=ucCRCHi^*pushMsg++;
		ucCRCHi=ucCRCLo^ aucCRCHi[ucIndex];
		ucCRCLo=aucCRCLo[ucIndex];
	}
	*crc    =ucCRCHi;
	*(crc+1)=ucCRCLo;
}
/////////////////////////////////////////////////////////////////////////////
IMPLEMENT_DYNCREATE(CBGThread, CWinThread)

CBGThread::CBGThread()
{
	CommLink=false;
	CommOn=false;
	memset(CommMsgS,0,sizeof(CommMsgS));
	memset(CommMsgR,0,sizeof(CommMsgR));
}

CBGThread::~CBGThread()
{
}

BOOL CBGThread::InitInstance()
{
	// TODO:  perform and per-thread initialization here
	return TRUE;
}

int CBGThread::ExitInstance()
{
	// TODO:  perform any per-thread cleanup here
	return CWinThread::ExitInstance();
}

BEGIN_MESSAGE_MAP(CBGThread, CWinThread)
	//{{AFX_MSG_MAP(CBGThread)
		// NOTE - the ClassWizard will add and remove mapping macros here.
		ON_MESSAGE(WM_MSGCOMMBTN,MsgCommBtn)
		ON_MESSAGE(WM_MSGSEND,MsgSend)
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CBGThread message handlers

void CBGThread::MsgCommBtn(WPARAM wParam,LPARAM lParam)
{
	CYKApp* pApp=(CYKApp*)AfxGetApp();
	unsigned char temp=lParam & 0xFF;
	if(temp==0xAA)
	{
		CommLink=Init_SP();
		if(!CommLink)
			SendMessage(pApp->m_pMainWnd->m_hWnd,WM_MSGANSWER,0x00,0x00);
	}
	else
	{
		Exit_SP();
		CommLink=false;
	}
}

BOOL CBGThread::Init_SP()
{
	CYKApp* pApp=(CYKApp*)AfxGetApp();

	if(CommLink)
		return false;

	if(sio_open(pApp->x_Port)!=0)
		return false;

	unsigned char x_Baud[]={B300,B600,B1200,B2400,B4800,B9600,B19200,B38400,B57600};
	unsigned char x_Parity[]={P_NONE,P_ODD,P_EVEN,P_SPC,P_MRK};
	unsigned char x_Stop[]={STOP_1,STOP_2};
	sio_ioctl(pApp->x_Port,x_Baud[pApp->x_BaudOrder],x_Parity[pApp->x_ParityOrder]|BIT_8|x_Stop[pApp->x_StopOrder]);
	sio_SetReadTimeouts(pApp->x_Port,200,200);
	sio_flush(pApp->x_Port,2);

	return true;
}

void CBGThread::Exit_SP()
{
	CYKApp* pApp=(CYKApp*)AfxGetApp();
	CommLink=false;
	sio_close(pApp->x_Port);
}

BOOL CBGThread::CommSend(unsigned char* data,int Length)
{
	CYKApp* pApp=(CYKApp*)AfxGetApp();
	sio_write(pApp->x_Port,(char*)data,Length);
	return true;
}

int CBGThread::CommReceive(unsigned char * data)
{//判断接收数据是否正确
	CYKApp* pApp=(CYKApp*)AfxGetApp();
	unsigned char ucLength=0;
	unsigned char ucData[50],ucCrc[2];

	memset(ucData,0,sizeof(ucData));
	memset(ucCrc,0,sizeof(ucCrc));

	for(int i=0;i<10;i++)
	{//数据嗅探
		if(sio_read(pApp->x_Port,(char*)ucData,1)>0)
			break;
		Sleep(10);
	}

	if(i>=10)
	{//嗅探失败
		pApp->x_Note.Format("嗅探失败!");
		SendMessage(pApp->m_pMainWnd->m_hWnd,WM_MSGANSWER,0xFF,0x00);
		return ucLength;
	}

	if(sio_read(pApp->x_Port,(char*)&ucData[1],1)!=1)
		return ucLength;

	//判断功能码
	switch(ucData[1])
	{
	case 0x03:
		{
			if(sio_read(pApp->x_Port,(char*)&ucData[2],1)==1)
			{//判断数据长度
				if(ucData[2]>50)
				{
					sio_flush(pApp->x_Port,2);
					pApp->x_Note.Format("数据长度不合法!");
					SendMessage(pApp->m_pMainWnd->m_hWnd,WM_MSGANSWER,0xFF,0x00);
					return ucLength;
				}
				ucLength=ucData[2]+2;
				if(sio_read(pApp->x_Port,(char*)&ucData[3],ucLength)==ucLength)
				{
					ucLength+=3;
					CRC16(ucData,ucLength-2,ucCrc);
					if(ucData[ucLength-2]!=ucCrc[0] || ucData[ucLength-1]!=ucCrc[1])
					{//CRC校验
						pApp->x_Note.Format("校验失败!");
						SendMessage(pApp->m_pMainWnd->m_hWnd,WM_MSGANSWER,0xFF,0x00);
						ucLength=0;
					}
				}
				else
					ucLength=0;
			}
			break;
		}
	case 0x10:
		{
			if(sio_read(pApp->x_Port,(char*)&ucData[2],6)==6)
			{
				ucLength=8;
				CRC16(ucData,ucLength-2,ucCrc);
				if(ucData[ucLength-2]!=ucCrc[0] || ucData[ucLength-1]!=ucCrc[1])
				{//CRC校验
					pApp->x_Note.Format("校验失败!");
					SendMessage(pApp->m_pMainWnd->m_hWnd,WM_MSGANSWER,0xFF,0x00);
					ucLength=0;
				}
			}
			break;
		}
	default:
		{
			ucLength=0;
			break;
		}
	}
	//接收数据赋值给数组
	memcpy(data,ucData,ucLength);

	//清理串口
	sio_flush(pApp->x_Port,2);

	return ucLength;
}

void CBGThread::MsgSend(WPARAM wParam,LPARAM lParam)
{
	CYKApp* pApp=(CYKApp*)AfxGetApp();
	memset(CommMsgS,0,sizeof(CommMsgS));
	memset(CommMsgR,0,sizeof(CommMsgR));
	unsigned char ucParam=lParam & 0xFF;

	switch(ucParam)
	{
	case 0x00:
		{//提取版本号
			CommMsgS[0]=0xFF;
			CommMsgS[1]=0x03;
			CommMsgS[2]=0x00;
			CommMsgS[3]=0x00;
			CommMsgS[4]=0x00;
			CommMsgS[5]=0x02;
			CRC16(CommMsgS,6,&CommMsgS[6]);
			x_Length=8;
			CommOn=true;
			break;
		}
	case 0x01:
		{//控制继电器
			CommMsgS[0]=0xFF;
			CommMsgS[1]=0x10;
			CommMsgS[2]=0x00;
			CommMsgS[3]=0x00;
			CommMsgS[4]=0x00;
			CommMsgS[5]=0x01;
			CommMsgS[6]=0x02;
			CommMsgS[7]=pApp->x_RelayAct;
			CommMsgS[8]=pApp->x_RelayItem;
			CRC16(CommMsgS,9,&CommMsgS[9]);
			x_Length=11;
			CommOn=true;
			break;
		}
	case 0x02:
		{//提取遥控板板卡地址
			CommMsgS[0]=0xFF;
			CommMsgS[1]=0x03;
			CommMsgS[2]=0x00;
			CommMsgS[3]=0x02;
			CommMsgS[4]=0x00;
			CommMsgS[5]=0x01;
			CRC16(CommMsgS,6,&CommMsgS[6]);
			x_Length=8;
			CommOn=true;
			break;
		}
	default:
		break;
	}

}

BOOL CBGThread::OnIdle(LONG lCount) 
{
	// TODO: Add your specialized code here and/or call the base class
	CYKApp* pApp=(CYKApp*)AfxGetApp();
	unsigned char ucAddr;

	if(CommLink)
	{
		if(CommOn)
		{
			//发送报文
			CommSend(CommMsgS,x_Length);
			//报文地址
			ucAddr=CommMsgS[2]*256+CommMsgS[3];
			CommOn=false;
			pApp->x_MsgS+=1;
			SendMessage(pApp->m_pMainWnd->m_hWnd,WM_MSGANSWER,0x05,0x00);
		}
		else
		{
			CommMsgS[0]=0xFF;
			CommMsgS[1]=0x03;
			CommMsgS[2]=0x00;
			CommMsgS[3]=0x01;
			CommMsgS[4]=0x00;
			CommMsgS[5]=0x01;
			CRC16(CommMsgS,6,&CommMsgS[6]);
			x_Length=8;
			CommSend(CommMsgS,x_Length);
			ucAddr=CommMsgS[2]*256+CommMsgS[3];
			pApp->x_MsgS+=1;
			SendMessage(pApp->m_pMainWnd->m_hWnd,WM_MSGANSWER,0x05,0x00);
		}

		if(CommReceive(CommMsgR))
		{
			switch(CommMsgR[1])
			{
			case 0x03:
				{
					switch(ucAddr)
					{
					case 0x00:
						{
							pApp->x_Edition=(float(CommMsgR[3]*256+CommMsgR[4]))/100;
							SendMessage(pApp->m_pMainWnd->m_hWnd,WM_MSGANSWER,0x01,0x00);
							break;
						}
					case 0x01:
						{
							if(CommMsgR[3]==1)
							{
								pApp->x_Previous=CommMsgR[4];
								SendMessage(pApp->m_pMainWnd->m_hWnd,WM_MSGANSWER,0x04,0x00);
							}
							break;
						}
					case 0x02:
						{
							pApp->x_Address=CommMsgR[3];
							SendMessage(pApp->m_pMainWnd->m_hWnd,WM_MSGANSWER,0x03,0x00);
							break;
						}
					}
					break;
				}
			case 0x10:
				{
					switch(ucAddr)
					{
					case 0x00:
						{
							SendMessage(pApp->m_pMainWnd->m_hWnd,WM_MSGANSWER,0x02,0x00);
							break;
						}
					}
					break;
				}
			}
			pApp->x_MsgR+=1;
			SendMessage(pApp->m_pMainWnd->m_hWnd,WM_MSGANSWER,0x06,0x00);
		}
	}
	pApp->x_Accuracy=(float(pApp->x_MsgR))/(float(pApp->x_MsgS))*100;
	Sleep(20);
	return true;
}
